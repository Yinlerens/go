// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================
// 1. 用户认证系统模型（保持原有不变）
// ====================================

model User {
  id       String @id @default(cuid())
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255) // 存储哈希后的密码

  // 用户基本信息（注册后可选设置）
  nickname String? @db.VarChar(50) // 昵称，可后续设置
  avatar   String? @db.VarChar(500) // 头像URL，可后续设置
  phone    String? @db.VarChar(20)
  bio      String? @db.VarChar(500) // 个人简介

  // 用户状态管理
  status   UserStatus @default(ACTIVE) // 注册成功默认为活跃状态
  isActive Boolean    @default(true)

  // 注册和登录信息
  registeredAt DateTime  @default(now()) // 注册时间
  lastLoginAt  DateTime? // 最后登录时间
  lastLoginIp  String?   @db.VarChar(45) // 最后登录IP
  loginCount   Int       @default(0) // 登录次数

  // 个人资料完善状态
  profileCompleted   Boolean   @default(false) // 是否完善了个人资料（昵称、头像等）
  profileCompletedAt DateTime? // 个人资料完善时间

  // 软删除
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  refreshTokens      RefreshToken[]
  verificationTokens VerificationToken[]
  userRoles          UserRole[]

  @@index([email])
  @@index([status])
  @@index([isDeleted])
  @@index([profileCompleted])
  @@map("users")
}

model VerificationToken {
  id     String  @id @default(cuid())
  email  String  @db.VarChar(255) // 直接关联邮箱，支持未注册用户验证
  userId String? // 可选，已注册用户的ID
  code   String  @db.VarChar(10) // 验证码（通常是6位数字）
  token  String  @unique @db.VarChar(255) // 用于API验证的token

  // 验证码有效期和使用状态
  expiresAt DateTime // 验证码过期时间（通常5-15分钟）
  isUsed    Boolean   @default(false)
  usedAt    DateTime?

  // 发送信息
  sentAt    DateTime @default(now()) // 发送时间
  ipAddress String?  @db.VarChar(45) // 请求IP
  userAgent String?  @db.Text // 用户代理

  // 重试控制
  attempts    Int @default(0) // 尝试次数
  maxAttempts Int @default(3) // 最大尝试次数

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([code])
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("verification_tokens")
}

model RefreshToken {
  id     String @id @default(cuid())
  userId String
  token  String @unique @db.VarChar(500)

  // 令牌信息
  expiresAt DateTime
  isRevoked Boolean   @default(false)
  revokedAt DateTime?

  // 设备信息
  deviceInfo String? @db.VarChar(500)
  ipAddress  String? @db.VarChar(45)
  userAgent  String? @db.Text

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// ====================================
// 2. 角色管理（最简设计）
// ====================================

model Role {
  id          String  @id @default(cuid())
  name        String  @unique @db.VarChar(100) // 角色名称，如"管理员"
  code        String  @unique @db.VarChar(50) // 角色代码，如"ADMIN"
  description String? @db.VarChar(500) // 角色描述

  // 状态
  isActive Boolean @default(true)

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  userRoles UserRole[] // 拥有此角色的用户
  roleMenus RoleMenu[] // 角色拥有的菜单

  @@index([code])
  @@index([isActive])
  @@map("roles")
}

// ====================================
// 3. 用户-角色关联表
// ====================================

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId]) // 用户和角色的组合必须唯一
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

// ====================================
// 4. 菜单管理（最简设计）
// ====================================

model Menu {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(100) // 菜单名称
  // 路由信息
  path      String? @db.VarChar(255) // 路由路径，如 /system/user
  icon      String? @db.VarChar(50) // 图标名称
  // 层级结构
  parentId  String? // 父菜单ID
  sort      Int     @default(0) // 排序，数字越小越靠前
  // 状态
  isVisible Boolean @default(true) // 是否可见
  isActive  Boolean @default(true) // 是否启用

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  parent    Menu?      @relation("MenuTree", fields: [parentId], references: [id])
  children  Menu[]     @relation("MenuTree")
  roleMenus RoleMenu[]

  @@index([parentId])
  @@index([sort])
  @@index([isVisible])
  @@index([isActive])
  @@map("menus")
}

// ====================================
// 5. 角色-菜单关联表
// ====================================

model RoleMenu {
  id     String @id @default(cuid())
  roleId String
  menuId String

  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关系
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId]) // 角色和菜单的组合必须唯一
  @@index([roleId])
  @@index([menuId])
  @@map("role_menus")
}

// ====================================
// 6. 枚举定义
// ====================================

// 用户状态枚举
enum UserStatus {
  ACTIVE // 活跃
  INACTIVE // 非活跃
  SUSPENDED // 暂停
  BANNED // 禁用
}

// 验证类型枚举
enum VerificationType {
  EMAIL_REGISTRATION // 邮箱注册验证
  PASSWORD_RESET // 密码重置
  EMAIL_CHANGE // 邮箱变更验证
  LOGIN_VERIFICATION // 登录验证（可选的二次验证）
}
